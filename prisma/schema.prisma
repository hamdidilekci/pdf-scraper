generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  hashedPassword      String?
  credits             Int       @default(0)
  planType            String?
  stripeCustomerId    String?   @unique
  stripeSubscriptionId String?

  accounts       Account[]
  sessions       Session[]
  resumes        Resume[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetOTP {
  id        String   @id @default(cuid())
  email     String
  otp       String   // Hashed OTP
  expiresAt DateTime
  attempts  Int      @default(0)
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email])
  @@index([expiresAt])
}

enum ResumeStatus {
  PENDING
  COMPLETED
  FAILED
}

enum InputType {
  TEXT
  IMAGES
}

model Resume {
  id           String       @id @default(cuid())
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  fileName     String
  storagePath  String
  uploadedAt   DateTime     @default(now())
  status       ResumeStatus @default(PENDING)
  error        String?
  resumeData   Json?

  histories    ResumeHistory[]
}

model ResumeHistory {
  id          String      @id @default(cuid())
  resumeId    String
  createdAt   DateTime    @default(now())
  inputType   InputType
  model       String
  tokensUsed  Int?
  status      ResumeStatus @default(PENDING)
  error       String?
  rawResponse Json?

  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model StripeWebhookEvent {
  id        String   @id @default(cuid())
  eventId   String   @unique
  eventType String
  processed Boolean  @default(false)
  data      Json
  createdAt DateTime @default(now())

  @@index([eventId])
  @@index([processed])
  @@index([eventType])
}

